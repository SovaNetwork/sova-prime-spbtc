generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model SovaBtcNetwork {
  id             String                  @id @default(cuid())
  chainId        Int                     @unique
  name           String
  rpcUrl         String
  blockExplorer  String
  nativeCurrency Json
  isTestnet      Boolean                 @default(false)
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  deployments    SovaBtcDeployment?
  metrics        SovaBtcNetworkMetrics[]

  @@map("sovabtc_networks")
}

model SovaBtcDeployment {
  id                          String                        @id @default(cuid())
  chainId                     Int                           @unique
  vaultStrategy               String
  vaultToken                  String
  priceOracle                 String?
  status                      DeploymentStatus              @default(NOT_DEPLOYED)
  deployer                    String?
  blockNumber                 Int?
  transactionHash             String?
  verified                    Boolean                       @default(false)
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  activities                  SovaBtcActivity[]
  collaterals                 SovaBtcCollateral[]
  metrics                     SovaBtcDeploymentMetrics[]
  network                     SovaBtcNetwork                @relation(fields: [chainId], references: [chainId])
  redemptionRequests          RedemptionRequest[]

  @@map("sovabtc_deployments")
}

model SovaBtcCollateral {
  id           String            @id @default(cuid())
  deploymentId String
  symbol       String
  name         String
  chainId      Int
  address      String
  decimals     Int
  oracleId     String?
  logoUri      String?
  coingeckoId  String?
  isActive     Boolean           @default(true)
  isVerified   Boolean           @default(false)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  deployment   SovaBtcDeployment @relation(fields: [deploymentId], references: [id], onDelete: Cascade)

  @@unique([chainId, address])
  @@unique([deploymentId, symbol, chainId])
  @@map("sovabtc_collaterals")
}

model SovaBtcTokenRegistry {
  id          String   @id @default(cuid())
  symbol      String   @unique
  name        String
  addresses   Json
  decimals    Int
  logoUri     String?
  coingeckoId String?
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("sovabtc_token_registry")
}

model SovaBtcDeploymentMetrics {
  id           String            @id @default(cuid())
  deploymentId String
  tvl          Decimal           @db.Decimal(30, 10)
  totalSupply  Decimal           @db.Decimal(30, 10)
  totalAssets  Decimal           @db.Decimal(30, 10)
  sharePrice   Decimal           @db.Decimal(30, 10)
  apy          Decimal?          @db.Decimal(10, 4)
  users        Int               @default(0)
  transactions Int               @default(0)
  timestamp    DateTime          @default(now())
  deployment   SovaBtcDeployment @relation(fields: [deploymentId], references: [id], onDelete: Cascade)

  @@index([deploymentId, timestamp])
  @@map("sovabtc_deployment_metrics")
}

model SovaBtcNetworkMetrics {
  id          String         @id @default(cuid())
  chainId     Int
  blockHeight BigInt
  gasPrice    BigInt
  isOnline    Boolean        @default(true)
  latency     Int?
  timestamp   DateTime       @default(now())
  network     SovaBtcNetwork @relation(fields: [chainId], references: [chainId])

  @@index([chainId, timestamp])
  @@map("sovabtc_network_metrics")
}

model SovaBtcActivity {
  id           String            @id @default(cuid())
  deploymentId String
  type         ActivityType
  description  String
  metadata     Json?
  txHash       String?
  createdAt    DateTime          @default(now())
  deployment   SovaBtcDeployment @relation(fields: [deploymentId], references: [id], onDelete: Cascade)

  @@index([deploymentId, createdAt])
  @@map("sovabtc_activities")
}

model RedemptionRequest {
  id              String            @id @default(cuid())
  deploymentId    String
  userAddress     String
  shareAmount     BigInt
  expectedAssets  BigInt
  minAssetsOut    BigInt
  signature       String
  nonce           BigInt
  deadline        DateTime
  status          RedemptionStatus  @default(PENDING)
  priority        Int               @default(5)
  queuePosition   Int?
  processedAt     DateTime?
  txHash          String?
  actualAssets    BigInt?
  gasCost         BigInt?
  adminNotes      String?
  rejectionReason String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deployment      SovaBtcDeployment @relation(fields: [deploymentId], references: [id])
  
  @@unique([deploymentId, nonce])
  @@index([userAddress])
  @@index([status])
  @@index([deploymentId])
  @@index([priority])
  @@index([queuePosition])
  @@map("sovabtc_redemption_requests")
}

enum DeploymentStatus {
  NOT_DEPLOYED
  PENDING
  ACTIVE
  DEPRECATED
}

enum ActivityType {
  DEPLOYMENT_CREATED
  DEPLOYMENT_UPDATED
  COLLATERAL_ADDED
  COLLATERAL_REMOVED
  STATUS_CHANGED
  METRICS_UPDATED
  USER_DEPOSIT
  USER_WITHDRAWAL
  REDEMPTION_REQUEST
  REDEMPTION_APPROVED
  REDEMPTION_REJECTED
  REDEMPTION_PROCESSED
  REDEMPTION_CANCELLED
}

enum RedemptionStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  EXPIRED
}

model AdminUser {
  id           String         @id @default(cuid())
  email        String         @unique
  passwordHash String
  role         AdminRole      @default(VIEWER)
  isActive     Boolean        @default(true)
  lastLogin    DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  sessions     AdminSession[]

  @@map("admin_users")
}

model AdminSession {
  id           String    @id @default(cuid())
  userId       String
  token        String    @unique
  refreshToken String    @unique
  expiresAt    DateTime
  refreshExpiresAt DateTime
  ipAddress    String?
  userAgent    String?
  isRevoked    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         AdminUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([refreshToken])
  @@index([expiresAt])
  @@map("admin_sessions")
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  OPERATOR
  VIEWER
}

model RateLimitViolation {
  id          String   @id @default(cuid())
  ip          String
  endpoint    String
  userAgent   String?
  userId      String?
  count       Int      @default(1)
  blocked     Boolean  @default(false)
  blockUntil  DateTime?
  timestamp   DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([ip, endpoint])
  @@index([timestamp])
  @@index([blocked])
  @@map("rate_limit_violations")
}
